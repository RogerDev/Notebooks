{
    "id": "62aa4b71-3106-47ab-9c27-25139a89c385",
    "files": [],
    "nodes": [
        {
            "id": "60e51a24-1d75-4493-9f44-0ddcb69105a4",
            "name": "",
            "value": "/**\n  * Test and example for Model Validation.\n  *\n  * Uses the Synth module to generate M8 model.\n  * Tests against the M8 model definition:\n  * B is Exogenous\n  * F is Exogenous\n  * G is Exogenous\n  * A <- B,F\n  * D <- A,G\n  * C <- B,A,D\n  * E <- C\n  *\n  */\nIMPORT HPCC_Causality AS HC;\nIMPORT HC.Types;\n\nIMPORT ML_CORE.Types AS cTypes;\n\nProbability := HC.Probability;\nCausality := HC.Causality;\nviz := HC.viz;\n\nSEM := Types.SEM;\n\n// Number of test records.\nnTestRecs := 100000;\n\n\n// SEM should be a dataset containing a single row.\n// SEM is Model M8.\nsemRow := ROW({\n    [],\n    ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H'], // Variable names\n    // Equations\n    ['B = logistic(0,1)',  // Can use any distribution defined in numpy.random\n    'F = logistic(0,1)',\n    'G = logistic(0,1)',\n    'A = sin(B + F) + logistic(0,.4)',\n    'D = tanh(A + G * 2.0) + logistic(0,.4)',\n    'C = tanh(B + A + D) + logistic(0,.4)',\n    'E = C + logistic(0,.4)',\n    'H = \"small\" if E < 0 else \"med\" if E < 1 else \"large\"'\n    ]}, SEM);\n\nmySEM := DATASET([semRow], SEM);\n\ntestDat := HC.Synth(mySEM).Generate(nTestRecs);\n\nOUTPUT(testDat, NAMED('Dat'));\n\n// Note: The order of variables in the model much match the order of varNames in the SEM.\n// RVs := DATASET([\n//                 {'A', ['B','F']},\n//                 {'B', []},\n//                 {'C', ['B', 'A', 'D']},\n//                 {'D', ['A','G']},\n//                 {'E', ['C']},\n//                 {'F', []},\n//                 {'G', []}\n//                 'H',\n//                 ], Types.RV);\n// mod := DATASET([{'M8', RVs}], Types.cModel);\n\nOUTPUT(mySEM, NAMED('SEM'));\n\nprob := Probability(testDat, semRow.VarNames, categoricals:=['H']);\n\n\nqueries := [\n    'P(A)',\n    'P(A|B)',\n    'E(D | A)',\n    'E(D | A, G)',\n    'P(H = med | E)',\n    'Correlation(A,B,C,D,E,F,G,H)',\n    'CModel()'\n    ];\n\nviz.Plot(queries, prob.PS);",
            "mode": "ecl",
            "outputs": []
        },
        {
            "id": "dd8c3039-d399-46ef-8621-55c23a0b407a",
            "name": "",
            "value": "<div id=\"_plots\"></div>",
            "mode": "html",
            "outputs": [
                "aHRsLmh0bWxgPGRpdiBpZD0iX3Bsb3RzIj48L2Rpdj5g"
            ]
        },
        {
            "id": "72b404e1-109f-48db-976e-4af854fac1ae",
            "name": "",
            "value": "// These three attributes control the div name where plots are rendered, and their size.\n_renderPlotsTo = \"_plots\";\n_plotWidth = 1024;\n_plotHeight = 600;\n_colorScale = \"Rainbow\";\n_axesColor = \"rgb(0,0, 100)\";\n_axesSize = 16;\n_lighting = {return {ambient:.6, rougness: 1, diffuse:.2, specular:.5, fresnel:2}};",
            "mode": "js",
            "outputs": [
                "Ly8gVGhlc2UgdGhyZWUgYXR0cmlidXRlcyBjb250cm9sIHRoZSBkaXYgbmFtZSB3aGVyZSBwbG90cyBhcmUgcmVuZGVyZWQsIGFuZCB0aGVpciBzaXplLgpfcmVuZGVyUGxvdHNUbyA9ICJfcGxvdHMiOwpfcGxvdFdpZHRoID0gMTAyNDsKX3Bsb3RIZWlnaHQgPSA2MDA7Cl9jb2xvclNjYWxlID0gIlJhaW5ib3ciOwpfYXhlc0NvbG9yID0gInJnYigwLDAsIDEwMCkiOwpfYXhlc1NpemUgPSAxNjsKX2xpZ2h0aW5nID0ge3JldHVybiB7YW1iaWVudDouNiwgcm91Z25lc3M6IDEsIGRpZmZ1c2U6LjIsIHNwZWN1bGFyOi41LCBmcmVzbmVsOjJ9fTs="
            ]
        },
        {
            "id": "f529a21a-c424-49bb-acfc-f1c4511d2da7",
            "name": "",
            "value": "// Attributes to process the ECL results into data usable for plotting.\n\n// Temporary kludge awaiting Gordon's allResults attribute.\nresults = {return{\n    _plot0_meta, _plot0_data, _plot1_meta, _plot1_data, _plot2_meta, _plot2_data, _plot3_meta, _plot3_data,\n    _plot4_meta, _plot4_data, _plot5_meta, _plot5_data, _plot6_meta, _plot6_data};}\n\n// An array of plot meta-data names\nplotNames = {\n    let outPlots = [];\n    for (let plot of _plots) {\n        outPlots.push(plot.name);\n    }\n    return outPlots;\n}\n\n// An array of plot meta-data contents, one record per plot\nplotMetas = {\n    let metas = [];\n    for (let plotname of plotNames) {\n        var meta = results[plotname][0];\n        metas.push(meta);\n    }\n    return metas;\n}\n\n// An array of plot data records, one record per plot\nplotData = {\n    let datasets = [];\n    for (let meta of plotMetas) {\n        var ds = results[meta.dataname];\n        datasets.push(ds);\n    }\n    return datasets;\n}\n\n// An array of transformed plot data records.  String values are transformed to numeric.\n// One record per plot.\nDataGrids = {\n    let outGrids = []\n    for (let plot of plotData){\n        let outL = []\n        var x_, y_, z_\n        for (let i of plot) {\n            if (i.x_.length == 0 || isNaN(i.x_))\n                x_ = i.x_;\n            else\n                x_ = parseFloat(i.x_);\n            if (i.y_.length == 0 || isNaN(i.y_))\n                y_ = i.y_;\n            else\n                y_ = parseFloat(i.y_);\n            if (i.z_.length == 0 || isNaN(i.z_))\n                z_ = i.z_;\n            else\n                z_ = parseFloat(i.z_);\n            outL.push({id:parseFloat(i.id), x_: x_, y_: y_, z_: z_, \n                    range1low:i.range1low, range1high:i.range1high, \n                    range2low:i.range2low, range2high: i.range2high});\n        }\n    outGrids.push(outL);\n    }\nreturn outGrids;\n}\n\n// The maximum Y value for each plot.  This used by 2d expectation plots.\nyMaxs = {\n    let outMaxs = [];\n    for (let DataGrid of DataGrids) {\n        var high = -999999\n        for (let i of DataGrid) {\n            if (i.y_ > high) high = i.y_;\n        }   \n        outMaxs.push(high);\n    }\n    return outMaxs;\n}",
            "mode": "js",
            "outputs": [
                "Ly8gQXR0cmlidXRlcyB0byBwcm9jZXNzIHRoZSBFQ0wgcmVzdWx0cyBpbnRvIGRhdGEgdXNhYmxlIGZvciBwbG90dGluZy4KCi8vIFRlbXBvcmFyeSBrbHVkZ2UgYXdhaXRpbmcgR29yZG9uJ3MgYWxsUmVzdWx0cyBhdHRyaWJ1dGUuCnJlc3VsdHMgPSB7cmV0dXJuewogICAgX3Bsb3QwX21ldGEsIF9wbG90MF9kYXRhLCBfcGxvdDFfbWV0YSwgX3Bsb3QxX2RhdGEsIF9wbG90Ml9tZXRhLCBfcGxvdDJfZGF0YSwgX3Bsb3QzX21ldGEsIF9wbG90M19kYXRhLAogICAgX3Bsb3Q0X21ldGEsIF9wbG90NF9kYXRhLCBfcGxvdDVfbWV0YSwgX3Bsb3Q1X2RhdGEsIF9wbG90Nl9tZXRhLCBfcGxvdDZfZGF0YX07fQoKLy8gQW4gYXJyYXkgb2YgcGxvdCBtZXRhLWRhdGEgbmFtZXMKcGxvdE5hbWVzID0gewogICAgbGV0IG91dFBsb3RzID0gW107CiAgICBmb3IgKGxldCBwbG90IG9mIF9wbG90cykgewogICAgICAgIG91dFBsb3RzLnB1c2gocGxvdC5uYW1lKTsKICAgIH0KICAgIHJldHVybiBvdXRQbG90czsKfQoKLy8gQW4gYXJyYXkgb2YgcGxvdCBtZXRhLWRhdGEgY29udGVudHMsIG9uZSByZWNvcmQgcGVyIHBsb3QKcGxvdE1ldGFzID0gewogICAgbGV0IG1ldGFzID0gW107CiAgICBmb3IgKGxldCBwbG90bmFtZSBvZiBwbG90TmFtZXMpIHsKICAgICAgICB2YXIgbWV0YSA9IHJlc3VsdHNbcGxvdG5hbWVdWzBdOwogICAgICAgIG1ldGFzLnB1c2gobWV0YSk7CiAgICB9CiAgICByZXR1cm4gbWV0YXM7Cn0KCi8vIEFuIGFycmF5IG9mIHBsb3QgZGF0YSByZWNvcmRzLCBvbmUgcmVjb3JkIHBlciBwbG90CnBsb3REYXRhID0gewogICAgbGV0IGRhdGFzZXRzID0gW107CiAgICBmb3IgKGxldCBtZXRhIG9mIHBsb3RNZXRhcykgewogICAgICAgIHZhciBkcyA9IHJlc3VsdHNbbWV0YS5kYXRhbmFtZV07CiAgICAgICAgZGF0YXNldHMucHVzaChkcyk7CiAgICB9CiAgICByZXR1cm4gZGF0YXNldHM7Cn0KCi8vIEFuIGFycmF5IG9mIHRyYW5zZm9ybWVkIHBsb3QgZGF0YSByZWNvcmRzLiAgU3RyaW5nIHZhbHVlcyBhcmUgdHJhbnNmb3JtZWQgdG8gbnVtZXJpYy4KLy8gT25lIHJlY29yZCBwZXIgcGxvdC4KRGF0YUdyaWRzID0gewogICAgbGV0IG91dEdyaWRzID0gW10KICAgIGZvciAobGV0IHBsb3Qgb2YgcGxvdERhdGEpewogICAgICAgIGxldCBvdXRMID0gW10KICAgICAgICB2YXIgeF8sIHlfLCB6XwogICAgICAgIGZvciAobGV0IGkgb2YgcGxvdCkgewogICAgICAgICAgICBpZiAoaS54Xy5sZW5ndGggPT0gMCB8fCBpc05hTihpLnhfKSkKICAgICAgICAgICAgICAgIHhfID0gaS54XzsKICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgeF8gPSBwYXJzZUZsb2F0KGkueF8pOwogICAgICAgICAgICBpZiAoaS55Xy5sZW5ndGggPT0gMCB8fCBpc05hTihpLnlfKSkKICAgICAgICAgICAgICAgIHlfID0gaS55XzsKICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgeV8gPSBwYXJzZUZsb2F0KGkueV8pOwogICAgICAgICAgICBpZiAoaS56Xy5sZW5ndGggPT0gMCB8fCBpc05hTihpLnpfKSkKICAgICAgICAgICAgICAgIHpfID0gaS56XzsKICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgel8gPSBwYXJzZUZsb2F0KGkuel8pOwogICAgICAgICAgICBvdXRMLnB1c2goe2lkOnBhcnNlRmxvYXQoaS5pZCksIHhfOiB4XywgeV86IHlfLCB6Xzogel8sIAogICAgICAgICAgICAgICAgICAgIHJhbmdlMWxvdzppLnJhbmdlMWxvdywgcmFuZ2UxaGlnaDppLnJhbmdlMWhpZ2gsIAogICAgICAgICAgICAgICAgICAgIHJhbmdlMmxvdzppLnJhbmdlMmxvdywgcmFuZ2UyaGlnaDogaS5yYW5nZTJoaWdofSk7CiAgICAgICAgfQogICAgb3V0R3JpZHMucHVzaChvdXRMKTsKICAgIH0KcmV0dXJuIG91dEdyaWRzOwp9CgovLyBUaGUgbWF4aW11bSBZIHZhbHVlIGZvciBlYWNoIHBsb3QuICBUaGlzIHVzZWQgYnkgMmQgZXhwZWN0YXRpb24gcGxvdHMuCnlNYXhzID0gewogICAgbGV0IG91dE1heHMgPSBbXTsKICAgIGZvciAobGV0IERhdGFHcmlkIG9mIERhdGFHcmlkcykgewogICAgICAgIHZhciBoaWdoID0gLTk5OTk5OQogICAgICAgIGZvciAobGV0IGkgb2YgRGF0YUdyaWQpIHsKICAgICAgICAgICAgaWYgKGkueV8gPiBoaWdoKSBoaWdoID0gaS55XzsKICAgICAgICB9ICAgCiAgICAgICAgb3V0TWF4cy5wdXNoKGhpZ2gpOwogICAgfQogICAgcmV0dXJuIG91dE1heHM7Cn0="
            ]
        },
        {
            "id": "8267168c-f482-4334-a0c3-a407734325e6",
            "name": "",
            "value": "// Convert the data from grid format to format used by all 2d Charts.\nconvertData2d = function(indx) {\n    let d;\n    let g = DataGrids[indx];\n    let xvals = [];\n    let yvals = [];\n    let r2H = [];\n    let r1H = [];\n    let r1L = [];\n    let r2L = [];\n    for (let i = 0; i < g.length; i++) {\n        let rec = g[i];\n        xvals.push(rec.x_);\n        yvals.push(rec.y_);\n        r2H.push(rec.range2high);\n        r1H.push(rec.range1high);\n        r1L.push(rec.range1low);\n        r2L.push(rec.range2low);\n    }\n    d = {x: xvals, y: yvals, r2H: r2H, r1H: r1H, r1L: r1L, r2L: r2L}\n\n    return d;\n}",
            "mode": "js",
            "outputs": [
                "Ly8gQ29udmVydCB0aGUgZGF0YSBmcm9tIGdyaWQgZm9ybWF0IHRvIGZvcm1hdCB1c2VkIGJ5IGFsbCAyZCBDaGFydHMuCmNvbnZlcnREYXRhMmQgPSBmdW5jdGlvbihpbmR4KSB7CiAgICBsZXQgZDsKICAgIGxldCBnID0gRGF0YUdyaWRzW2luZHhdOwogICAgbGV0IHh2YWxzID0gW107CiAgICBsZXQgeXZhbHMgPSBbXTsKICAgIGxldCByMkggPSBbXTsKICAgIGxldCByMUggPSBbXTsKICAgIGxldCByMUwgPSBbXTsKICAgIGxldCByMkwgPSBbXTsKICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZy5sZW5ndGg7IGkrKykgewogICAgICAgIGxldCByZWMgPSBnW2ldOwogICAgICAgIHh2YWxzLnB1c2gocmVjLnhfKTsKICAgICAgICB5dmFscy5wdXNoKHJlYy55Xyk7CiAgICAgICAgcjJILnB1c2gocmVjLnJhbmdlMmhpZ2gpOwogICAgICAgIHIxSC5wdXNoKHJlYy5yYW5nZTFoaWdoKTsKICAgICAgICByMUwucHVzaChyZWMucmFuZ2UxbG93KTsKICAgICAgICByMkwucHVzaChyZWMucmFuZ2UybG93KTsKICAgIH0KICAgIGQgPSB7eDogeHZhbHMsIHk6IHl2YWxzLCByMkg6IHIySCwgcjFIOiByMUgsIHIxTDogcjFMLCByMkw6IHIyTH0KCiAgICByZXR1cm4gZDsKfQ=="
            ]
        },
        {
            "id": "2e144be2-1468-4e93-8f88-05a62e2f5e4d",
            "name": "",
            "value": "// Function to produce layout information for the 2d Expectation Plot\ngetLayoutExp = function(indx){\n  let d = convertData2d(indx);\n  let meta = plotMetas[indx];\n  let title = meta.title;\n  let xlabel = meta.xlabel;\n  let ylabel = meta.ylabel;\n  let xvals = d.x;\n  let yvals = d.y;\n  let xticks = 10;\n  let yticks = 10;\n  if (typeof xvals[0] === 'string' || xvals[0] instanceof String)\n    xticks = xvals.length;\n  if (typeof yvals[0] === 'string' || yvals[0] instanceof String)\n    yticks = yvals.length;  let x_title = {text:\"state\"}\n  let L = {\n    width: _plotWidth,\n    height: _plotHeight,    showlegend: false, \n    title: {text: title, font: {size:20}},\n    xaxis: {\n      gridcolor: \"rgb(255,255,255)\", \n      showgrid: false, \n      showline: true, \n      showticklabels: true, \n      tickmode: \"auto\",\n      nticks: xticks,\n      tickcolor: \"rgb(0,0,0)\", \n      ticks: \"outside\",\n      ticklen: 5, \n      zeroline: false,\n      title: {text: xlabel, font: {size: _axesSize}},\n      color: _axesColor\n    }, \n    yaxis: {\n      gridcolor: \"rgb(255,255,255)\", \n      showgrid: false, \n      showline: true, \n      showticklabels: true, \n      tickmode: \"auto\",\n      nticks: yticks,\n      tickcolor: \"rgb(0,0,0)\", \n      ticks: \"outside\",\n      ticklen: 5,\n      zeroline: false,\n      title: {text: ylabel, font: {size: _axesSize}},\n      color: _axesColor\n    }\n  }\n  return L;\n};\n\n// Function to produce data (trace) information for the 2d Expectation Plot\ngetDataExp = function(indx) {\n  //let xvals = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n  let d = convertData2d(indx);\n  let xvals = d.x;\n  let yvals = d.y;\n  let r2Hvals = d.r2H;\n  let r1Hvals = d.r1H;\n  let r1Lvals = d.r1L;\n  let r2Lvals = d.r2L;\n  let xticks = 20;\n  let yticks = 20;\n\n  let rangeLines = {color: \"rgba(255, 255, 0, .5)\", width: 0.8};\n  let t1H = {\n    x: xvals,\n    y: r1Hvals, \n    fill: \"tonexty\",\n    line: rangeLines,\n    mode: \"lines\", \n    fillcolor: \"rgba(117, 117, 117,0.1)\",  \n    name: \"\", \n    showlegend: false, \n    type: \"scatter\"\n  }\n  let t1L = {\n    x: xvals, \n    y: r1Lvals, \n    fill: \"tonexty\", \n    fillcolor: \"rgba(117, 117, 117,0.2)\",  \n    line: rangeLines,\n    mode: \"lines\", \n    name: \"\", \n    showlegend: false, \n    type: \"scatter\"\n  };\n  let t2H = {\n    x: xvals,\n    y: r2Hvals, \n    line: rangeLines,\n    mode: \"lines\", \n    name: \"\", \n    showlegend: false, \n    type: \"scatter\"\n  }\n  let t2L = {\n    x: xvals, \n    y: r2Lvals, \n    fill: \"tonexty\", \n    fillcolor: \"rgba(117, 117, 117,0.1)\",  \n    line: rangeLines,\n    mode: \"lines\", \n    name: \"\", \n    showlegend: false, \n    type: \"scatter\"\n  };\n  let t = {\n    x: xvals, \n    y: yvals, \n    fill: \"tonexty\", \n    fillcolor: \"rgba(117, 117, 117,0.2\",  \n    line: {color: \"rgb(0, 0, 128)\", width:5}, \n    mode: \"lines\", \n    name: \"\", \n    type: \"scatter\",\n    showlegend: false\n  };\n  let dat = [t2H, t1H, t, t1L, t2L];\n  return dat;\n}\n\n",
            "mode": "js",
            "outputs": [
                "Ly8gRnVuY3Rpb24gdG8gcHJvZHVjZSBsYXlvdXQgaW5mb3JtYXRpb24gZm9yIHRoZSAyZCBFeHBlY3RhdGlvbiBQbG90CmdldExheW91dEV4cCA9IGZ1bmN0aW9uKGluZHgpewogIGxldCBkID0gY29udmVydERhdGEyZChpbmR4KTsKICBsZXQgbWV0YSA9IHBsb3RNZXRhc1tpbmR4XTsKICBsZXQgdGl0bGUgPSBtZXRhLnRpdGxlOwogIGxldCB4bGFiZWwgPSBtZXRhLnhsYWJlbDsKICBsZXQgeWxhYmVsID0gbWV0YS55bGFiZWw7CiAgbGV0IHh2YWxzID0gZC54OwogIGxldCB5dmFscyA9IGQueTsKICBsZXQgeHRpY2tzID0gMTA7CiAgbGV0IHl0aWNrcyA9IDEwOwogIGlmICh0eXBlb2YgeHZhbHNbMF0gPT09ICdzdHJpbmcnIHx8IHh2YWxzWzBdIGluc3RhbmNlb2YgU3RyaW5nKQogICAgeHRpY2tzID0geHZhbHMubGVuZ3RoOwogIGlmICh0eXBlb2YgeXZhbHNbMF0gPT09ICdzdHJpbmcnIHx8IHl2YWxzWzBdIGluc3RhbmNlb2YgU3RyaW5nKQogICAgeXRpY2tzID0geXZhbHMubGVuZ3RoOyAgbGV0IHhfdGl0bGUgPSB7dGV4dDoic3RhdGUifQogIGxldCBMID0gewogICAgd2lkdGg6IF9wbG90V2lkdGgsCiAgICBoZWlnaHQ6IF9wbG90SGVpZ2h0LCAgICBzaG93bGVnZW5kOiBmYWxzZSwgCiAgICB0aXRsZToge3RleHQ6IHRpdGxlLCBmb250OiB7c2l6ZToyMH19LAogICAgeGF4aXM6IHsKICAgICAgZ3JpZGNvbG9yOiAicmdiKDI1NSwyNTUsMjU1KSIsIAogICAgICBzaG93Z3JpZDogZmFsc2UsIAogICAgICBzaG93bGluZTogdHJ1ZSwgCiAgICAgIHNob3d0aWNrbGFiZWxzOiB0cnVlLCAKICAgICAgdGlja21vZGU6ICJhdXRvIiwKICAgICAgbnRpY2tzOiB4dGlja3MsCiAgICAgIHRpY2tjb2xvcjogInJnYigwLDAsMCkiLCAKICAgICAgdGlja3M6ICJvdXRzaWRlIiwKICAgICAgdGlja2xlbjogNSwgCiAgICAgIHplcm9saW5lOiBmYWxzZSwKICAgICAgdGl0bGU6IHt0ZXh0OiB4bGFiZWwsIGZvbnQ6IHtzaXplOiBfYXhlc1NpemV9fSwKICAgICAgY29sb3I6IF9heGVzQ29sb3IKICAgIH0sIAogICAgeWF4aXM6IHsKICAgICAgZ3JpZGNvbG9yOiAicmdiKDI1NSwyNTUsMjU1KSIsIAogICAgICBzaG93Z3JpZDogZmFsc2UsIAogICAgICBzaG93bGluZTogdHJ1ZSwgCiAgICAgIHNob3d0aWNrbGFiZWxzOiB0cnVlLCAKICAgICAgdGlja21vZGU6ICJhdXRvIiwKICAgICAgbnRpY2tzOiB5dGlja3MsCiAgICAgIHRpY2tjb2xvcjogInJnYigwLDAsMCkiLCAKICAgICAgdGlja3M6ICJvdXRzaWRlIiwKICAgICAgdGlja2xlbjogNSwKICAgICAgemVyb2xpbmU6IGZhbHNlLAogICAgICB0aXRsZToge3RleHQ6IHlsYWJlbCwgZm9udDoge3NpemU6IF9heGVzU2l6ZX19LAogICAgICBjb2xvcjogX2F4ZXNDb2xvcgogICAgfQogIH0KICByZXR1cm4gTDsKfTsKCi8vIEZ1bmN0aW9uIHRvIHByb2R1Y2UgZGF0YSAodHJhY2UpIGluZm9ybWF0aW9uIGZvciB0aGUgMmQgRXhwZWN0YXRpb24gUGxvdApnZXREYXRhRXhwID0gZnVuY3Rpb24oaW5keCkgewogIC8vbGV0IHh2YWxzID0gWzEsIDIsIDMsIDQsIDUsIDYsIDcsIDgsIDksIDEwXTsKICBsZXQgZCA9IGNvbnZlcnREYXRhMmQoaW5keCk7CiAgbGV0IHh2YWxzID0gZC54OwogIGxldCB5dmFscyA9IGQueTsKICBsZXQgcjJIdmFscyA9IGQucjJIOwogIGxldCByMUh2YWxzID0gZC5yMUg7CiAgbGV0IHIxTHZhbHMgPSBkLnIxTDsKICBsZXQgcjJMdmFscyA9IGQucjJMOwogIGxldCB4dGlja3MgPSAyMDsKICBsZXQgeXRpY2tzID0gMjA7CgogIGxldCByYW5nZUxpbmVzID0ge2NvbG9yOiAicmdiYSgyNTUsIDI1NSwgMCwgLjUpIiwgd2lkdGg6IDAuOH07CiAgbGV0IHQxSCA9IHsKICAgIHg6IHh2YWxzLAogICAgeTogcjFIdmFscywgCiAgICBmaWxsOiAidG9uZXh0eSIsCiAgICBsaW5lOiByYW5nZUxpbmVzLAogICAgbW9kZTogImxpbmVzIiwgCiAgICBmaWxsY29sb3I6ICJyZ2JhKDExNywgMTE3LCAxMTcsMC4xKSIsICAKICAgIG5hbWU6ICIiLCAKICAgIHNob3dsZWdlbmQ6IGZhbHNlLCAKICAgIHR5cGU6ICJzY2F0dGVyIgogIH0KICBsZXQgdDFMID0gewogICAgeDogeHZhbHMsIAogICAgeTogcjFMdmFscywgCiAgICBmaWxsOiAidG9uZXh0eSIsIAogICAgZmlsbGNvbG9yOiAicmdiYSgxMTcsIDExNywgMTE3LDAuMikiLCAgCiAgICBsaW5lOiByYW5nZUxpbmVzLAogICAgbW9kZTogImxpbmVzIiwgCiAgICBuYW1lOiAiIiwgCiAgICBzaG93bGVnZW5kOiBmYWxzZSwgCiAgICB0eXBlOiAic2NhdHRlciIKICB9OwogIGxldCB0MkggPSB7CiAgICB4OiB4dmFscywKICAgIHk6IHIySHZhbHMsIAogICAgbGluZTogcmFuZ2VMaW5lcywKICAgIG1vZGU6ICJsaW5lcyIsIAogICAgbmFtZTogIiIsIAogICAgc2hvd2xlZ2VuZDogZmFsc2UsIAogICAgdHlwZTogInNjYXR0ZXIiCiAgfQogIGxldCB0MkwgPSB7CiAgICB4OiB4dmFscywgCiAgICB5OiByMkx2YWxzLCAKICAgIGZpbGw6ICJ0b25leHR5IiwgCiAgICBmaWxsY29sb3I6ICJyZ2JhKDExNywgMTE3LCAxMTcsMC4xKSIsICAKICAgIGxpbmU6IHJhbmdlTGluZXMsCiAgICBtb2RlOiAibGluZXMiLCAKICAgIG5hbWU6ICIiLCAKICAgIHNob3dsZWdlbmQ6IGZhbHNlLCAKICAgIHR5cGU6ICJzY2F0dGVyIgogIH07CiAgbGV0IHQgPSB7CiAgICB4OiB4dmFscywgCiAgICB5OiB5dmFscywgCiAgICBmaWxsOiAidG9uZXh0eSIsIAogICAgZmlsbGNvbG9yOiAicmdiYSgxMTcsIDExNywgMTE3LDAuMiIsICAKICAgIGxpbmU6IHtjb2xvcjogInJnYigwLCAwLCAxMjgpIiwgd2lkdGg6NX0sIAogICAgbW9kZTogImxpbmVzIiwgCiAgICBuYW1lOiAiIiwgCiAgICB0eXBlOiAic2NhdHRlciIsCiAgICBzaG93bGVnZW5kOiBmYWxzZQogIH07CiAgbGV0IGRhdCA9IFt0MkgsIHQxSCwgdCwgdDFMLCB0MkxdOwogIHJldHVybiBkYXQ7Cn0KCg=="
            ]
        },
        {
            "id": "3dc84b7c-d34d-4d86-b703-cfc9f3334998",
            "name": "",
            "value": "// Function to produce layout information for the 2d Probability Plot\ngetLayoutProb = function(indx){\n  let d = convertData2d(indx);\n  let meta = plotMetas[indx];\n  let title = meta.title;\n  let xlabel = meta.xlabel;\n  let ylabel = meta.ylabel;\n  let xvals = d.x;\n  let yvals = d.y;\n  let xticks = 20;\n  let yticks = 20;\n  if (typeof xvals[0] === 'string' || xvals[0] instanceof String)\n    xticks = xvals.length;\n  if (typeof yvals[0] === 'string' || yvals[0] instanceof String)\n    yticks = yvals.length;\n  let L = {\n    title: {text: title, font: {size:20}},\n    width: _plotWidth,\n    height: _plotHeight,\n    showlegend: false, \n    xaxis: {\n      gridcolor: \"rgb(255,255,255)\", \n      showgrid: false, \n      showline: true, \n      showticklabels: true, \n      tickmode: \"auto\",\n      nticks: xticks,\n      tickcolor: \"rgb(0,0,0)\", \n      ticks: \"outside\",\n      ticklen: 5, \n      zeroline: false,\n      title: {text: xlabel, font: {size: _axesSize}},\n      color: _axesColor\n    }, \n    yaxis: {\n      gridcolor: \"rgb(255,255,255)\", \n      showgrid: false, \n      showline: true, \n      showticklabels: true, \n      tickmode: \"auto\",\n      nticks: yticks,\n      tickcolor: \"rgb(0,0,0)\", \n      ticks: \"outside\",\n      ticklen: 5,\n      zeroline: false,\n      title: {text:ylabel, font: {size: _axesSize}},\n      color: _axesColor\n\n    }\n  }\n  return L;\n};\n\n// Function to produce data(trace) information for the 2d Probability Plot\ngetDataProb = function(indx) {\n  let d = convertData2d(indx);\n  let xvals = d.x;\n  let yvals = d.y;\n  let meta = plotMetas[indx];\n  let meanVal = meta.mean;\n  let r1Hval = meta.range1high;\n  let r1Lval = meta.range1low;\n  let r2Hval = meta.range2high;\n  let r2Lval = meta.range2low;\n  let yMax = yMaxs[indx];\n  let rangeLines = {color: \"rgba(255, 255, 0, .5)\", width: 0.8};\n  let mean = {\n    x: [meanVal, meanVal],\n    y: [0, yMax], \n    fill: \"tonextx\",\n    line: {color: \"rgb(0,0,0)\", width: 3},\n    mode: \"lines\", \n    fillcolor: \"rgba(117, 117, 117,0.3)\",  \n    name: \"\", \n    showlegend: false, \n    type: \"scatter\"\n  }\n  let t1H = {\n    x: [r1Hval, r1Hval],\n    y: [0, yMax], \n    fill: \"tonextx\",\n    line: rangeLines,\n    mode: \"lines\", \n    fillcolor: \"rgba(117, 117, 117,0.2)\",  \n    name: \"\", \n    showlegend: false, \n    type: \"scatter\"\n  }\n  let t1L = {\n    x: [r1Lval, r1Lval],\n    y: [0, yMax], \n    fill: \"tonextx\", \n    fillcolor: \"rgba(117, 117, 117,0.3)\",  \n    line: rangeLines,\n    mode: \"lines\", \n    name: \"\", \n    showlegend: false, \n    type: \"scatter\"\n  };\n  let t2H = {\n    //x: [\"Ja\", \"Ia\", \"Ha\", \"Ga\", \"Fa\", \"Ea\", \"Da\", \"Ca\", \"Ba\", \"Aa\"], \n    x: [r2Hval, r2Hval],\n    y: [0, yMax], \n    line: rangeLines,\n    mode: \"lines\", \n    name: \"\", \n    showlegend: false, \n    type: \"scatter\"\n  }\n  let t2L = {\n    x: [r2Lval, r2Lval],\n    y: [0, yMax],\n    fill: \"tonextx\", \n    fillcolor: \"rgba(117, 117, 117,0.2)\",  \n    line: rangeLines,\n    mode: \"lines\", \n    name: \"\", \n    showlegend: false, \n    type: \"scatter\"\n  };\n  let t = {\n    x: xvals, \n    y: yvals, \n    fill: \"tozeroy\", \n    fillcolor: \"rgba(0, 0, 255, 0.1)\",  \n    line: {color: \"rgb(0, 0, 128)\", width:5}, \n    mode: \"lines\", \n    name: \"\", \n    type: \"scatter\",\n    showlegend: false\n  };\n  let dat = [t, t2H, t1H, mean, t1L, t2L];\n  return dat;\n}",
            "mode": "js",
            "outputs": [
                "Ly8gRnVuY3Rpb24gdG8gcHJvZHVjZSBsYXlvdXQgaW5mb3JtYXRpb24gZm9yIHRoZSAyZCBQcm9iYWJpbGl0eSBQbG90CmdldExheW91dFByb2IgPSBmdW5jdGlvbihpbmR4KXsKICBsZXQgZCA9IGNvbnZlcnREYXRhMmQoaW5keCk7CiAgbGV0IG1ldGEgPSBwbG90TWV0YXNbaW5keF07CiAgbGV0IHRpdGxlID0gbWV0YS50aXRsZTsKICBsZXQgeGxhYmVsID0gbWV0YS54bGFiZWw7CiAgbGV0IHlsYWJlbCA9IG1ldGEueWxhYmVsOwogIGxldCB4dmFscyA9IGQueDsKICBsZXQgeXZhbHMgPSBkLnk7CiAgbGV0IHh0aWNrcyA9IDIwOwogIGxldCB5dGlja3MgPSAyMDsKICBpZiAodHlwZW9mIHh2YWxzWzBdID09PSAnc3RyaW5nJyB8fCB4dmFsc1swXSBpbnN0YW5jZW9mIFN0cmluZykKICAgIHh0aWNrcyA9IHh2YWxzLmxlbmd0aDsKICBpZiAodHlwZW9mIHl2YWxzWzBdID09PSAnc3RyaW5nJyB8fCB5dmFsc1swXSBpbnN0YW5jZW9mIFN0cmluZykKICAgIHl0aWNrcyA9IHl2YWxzLmxlbmd0aDsKICBsZXQgTCA9IHsKICAgIHRpdGxlOiB7dGV4dDogdGl0bGUsIGZvbnQ6IHtzaXplOjIwfX0sCiAgICB3aWR0aDogX3Bsb3RXaWR0aCwKICAgIGhlaWdodDogX3Bsb3RIZWlnaHQsCiAgICBzaG93bGVnZW5kOiBmYWxzZSwgCiAgICB4YXhpczogewogICAgICBncmlkY29sb3I6ICJyZ2IoMjU1LDI1NSwyNTUpIiwgCiAgICAgIHNob3dncmlkOiBmYWxzZSwgCiAgICAgIHNob3dsaW5lOiB0cnVlLCAKICAgICAgc2hvd3RpY2tsYWJlbHM6IHRydWUsIAogICAgICB0aWNrbW9kZTogImF1dG8iLAogICAgICBudGlja3M6IHh0aWNrcywKICAgICAgdGlja2NvbG9yOiAicmdiKDAsMCwwKSIsIAogICAgICB0aWNrczogIm91dHNpZGUiLAogICAgICB0aWNrbGVuOiA1LCAKICAgICAgemVyb2xpbmU6IGZhbHNlLAogICAgICB0aXRsZToge3RleHQ6IHhsYWJlbCwgZm9udDoge3NpemU6IF9heGVzU2l6ZX19LAogICAgICBjb2xvcjogX2F4ZXNDb2xvcgogICAgfSwgCiAgICB5YXhpczogewogICAgICBncmlkY29sb3I6ICJyZ2IoMjU1LDI1NSwyNTUpIiwgCiAgICAgIHNob3dncmlkOiBmYWxzZSwgCiAgICAgIHNob3dsaW5lOiB0cnVlLCAKICAgICAgc2hvd3RpY2tsYWJlbHM6IHRydWUsIAogICAgICB0aWNrbW9kZTogImF1dG8iLAogICAgICBudGlja3M6IHl0aWNrcywKICAgICAgdGlja2NvbG9yOiAicmdiKDAsMCwwKSIsIAogICAgICB0aWNrczogIm91dHNpZGUiLAogICAgICB0aWNrbGVuOiA1LAogICAgICB6ZXJvbGluZTogZmFsc2UsCiAgICAgIHRpdGxlOiB7dGV4dDp5bGFiZWwsIGZvbnQ6IHtzaXplOiBfYXhlc1NpemV9fSwKICAgICAgY29sb3I6IF9heGVzQ29sb3IKCiAgICB9CiAgfQogIHJldHVybiBMOwp9OwoKLy8gRnVuY3Rpb24gdG8gcHJvZHVjZSBkYXRhKHRyYWNlKSBpbmZvcm1hdGlvbiBmb3IgdGhlIDJkIFByb2JhYmlsaXR5IFBsb3QKZ2V0RGF0YVByb2IgPSBmdW5jdGlvbihpbmR4KSB7CiAgbGV0IGQgPSBjb252ZXJ0RGF0YTJkKGluZHgpOwogIGxldCB4dmFscyA9IGQueDsKICBsZXQgeXZhbHMgPSBkLnk7CiAgbGV0IG1ldGEgPSBwbG90TWV0YXNbaW5keF07CiAgbGV0IG1lYW5WYWwgPSBtZXRhLm1lYW47CiAgbGV0IHIxSHZhbCA9IG1ldGEucmFuZ2UxaGlnaDsKICBsZXQgcjFMdmFsID0gbWV0YS5yYW5nZTFsb3c7CiAgbGV0IHIySHZhbCA9IG1ldGEucmFuZ2UyaGlnaDsKICBsZXQgcjJMdmFsID0gbWV0YS5yYW5nZTJsb3c7CiAgbGV0IHlNYXggPSB5TWF4c1tpbmR4XTsKICBsZXQgcmFuZ2VMaW5lcyA9IHtjb2xvcjogInJnYmEoMjU1LCAyNTUsIDAsIC41KSIsIHdpZHRoOiAwLjh9OwogIGxldCBtZWFuID0gewogICAgeDogW21lYW5WYWwsIG1lYW5WYWxdLAogICAgeTogWzAsIHlNYXhdLCAKICAgIGZpbGw6ICJ0b25leHR4IiwKICAgIGxpbmU6IHtjb2xvcjogInJnYigwLDAsMCkiLCB3aWR0aDogM30sCiAgICBtb2RlOiAibGluZXMiLCAKICAgIGZpbGxjb2xvcjogInJnYmEoMTE3LCAxMTcsIDExNywwLjMpIiwgIAogICAgbmFtZTogIiIsIAogICAgc2hvd2xlZ2VuZDogZmFsc2UsIAogICAgdHlwZTogInNjYXR0ZXIiCiAgfQogIGxldCB0MUggPSB7CiAgICB4OiBbcjFIdmFsLCByMUh2YWxdLAogICAgeTogWzAsIHlNYXhdLCAKICAgIGZpbGw6ICJ0b25leHR4IiwKICAgIGxpbmU6IHJhbmdlTGluZXMsCiAgICBtb2RlOiAibGluZXMiLCAKICAgIGZpbGxjb2xvcjogInJnYmEoMTE3LCAxMTcsIDExNywwLjIpIiwgIAogICAgbmFtZTogIiIsIAogICAgc2hvd2xlZ2VuZDogZmFsc2UsIAogICAgdHlwZTogInNjYXR0ZXIiCiAgfQogIGxldCB0MUwgPSB7CiAgICB4OiBbcjFMdmFsLCByMUx2YWxdLAogICAgeTogWzAsIHlNYXhdLCAKICAgIGZpbGw6ICJ0b25leHR4IiwgCiAgICBmaWxsY29sb3I6ICJyZ2JhKDExNywgMTE3LCAxMTcsMC4zKSIsICAKICAgIGxpbmU6IHJhbmdlTGluZXMsCiAgICBtb2RlOiAibGluZXMiLCAKICAgIG5hbWU6ICIiLCAKICAgIHNob3dsZWdlbmQ6IGZhbHNlLCAKICAgIHR5cGU6ICJzY2F0dGVyIgogIH07CiAgbGV0IHQySCA9IHsKICAgIC8veDogWyJKYSIsICJJYSIsICJIYSIsICJHYSIsICJGYSIsICJFYSIsICJEYSIsICJDYSIsICJCYSIsICJBYSJdLCAKICAgIHg6IFtyMkh2YWwsIHIySHZhbF0sCiAgICB5OiBbMCwgeU1heF0sIAogICAgbGluZTogcmFuZ2VMaW5lcywKICAgIG1vZGU6ICJsaW5lcyIsIAogICAgbmFtZTogIiIsIAogICAgc2hvd2xlZ2VuZDogZmFsc2UsIAogICAgdHlwZTogInNjYXR0ZXIiCiAgfQogIGxldCB0MkwgPSB7CiAgICB4OiBbcjJMdmFsLCByMkx2YWxdLAogICAgeTogWzAsIHlNYXhdLAogICAgZmlsbDogInRvbmV4dHgiLCAKICAgIGZpbGxjb2xvcjogInJnYmEoMTE3LCAxMTcsIDExNywwLjIpIiwgIAogICAgbGluZTogcmFuZ2VMaW5lcywKICAgIG1vZGU6ICJsaW5lcyIsIAogICAgbmFtZTogIiIsIAogICAgc2hvd2xlZ2VuZDogZmFsc2UsIAogICAgdHlwZTogInNjYXR0ZXIiCiAgfTsKICBsZXQgdCA9IHsKICAgIHg6IHh2YWxzLCAKICAgIHk6IHl2YWxzLCAKICAgIGZpbGw6ICJ0b3plcm95IiwgCiAgICBmaWxsY29sb3I6ICJyZ2JhKDAsIDAsIDI1NSwgMC4xKSIsICAKICAgIGxpbmU6IHtjb2xvcjogInJnYigwLCAwLCAxMjgpIiwgd2lkdGg6NX0sIAogICAgbW9kZTogImxpbmVzIiwgCiAgICBuYW1lOiAiIiwgCiAgICB0eXBlOiAic2NhdHRlciIsCiAgICBzaG93bGVnZW5kOiBmYWxzZQogIH07CiAgbGV0IGRhdCA9IFt0LCB0MkgsIHQxSCwgbWVhbiwgdDFMLCB0MkxdOwogIHJldHVybiBkYXQ7Cn0="
            ]
        },
        {
            "id": "57dd9027-e4c9-4acb-8c46-8996fa3427d2",
            "name": "",
            "value": "// Function to produce layout information for the 2d Bound Probability Plot\ngetLayoutBProb = function(indx){\n  let d = convertData2d(indx);\n  let meta = plotMetas[indx];\n  let title = meta.title;\n  let xlabel = meta.xlabel;\n  let ylabel = meta.ylabel;\n  let xvals = d.x;\n  let yvals = d.y;\n  let xticks = 20;\n  let yticks = 20;\n  if (typeof xvals[0] === 'string' || xvals[0] instanceof String)\n    xticks = xvals.length;\n  if (typeof yvals[0] === 'string' || yvals[0] instanceof String)\n    yticks = yvals.length;\n  let L = {\n    title: {text: title, font: {size:20}},\n    width: _plotWidth,\n    height: _plotHeight,\n    showlegend: false, \n    xaxis: {\n      gridcolor: \"rgb(255,255,255)\", \n      showgrid: false, \n      showline: true, \n      showticklabels: true, \n      tickmode: \"auto\",\n      nticks: xticks,\n      tickcolor: \"rgb(0,0,0)\", \n      ticks: \"outside\",\n      ticklen: 5, \n      zeroline: false,\n      title: {text: xlabel, font: {size: _axesSize}},\n      color: _axesColor\n    }, \n    yaxis: {\n      gridcolor: \"rgb(255,255,255)\", \n      showgrid: false, \n      showline: true, \n      showticklabels: true, \n      tickmode: \"auto\",\n      nticks: yticks,\n      tickcolor: \"rgb(0,0,0)\", \n      ticks: \"outside\",\n      ticklen: 5,\n      zeroline: false,\n      title: {text: ylabel, font: {size: _axesSize}},\n      color: _axesColor\n    }\n  }\n  return L;\n};\n\n// Function to produce data (traces) for the 2d Bound Probability Plot\ngetDataBProb = function(indx) {\n  let d = convertData2d(indx);\n  let xvals = d.x;\n  let yvals = d.y;\n  let t = {\n    x: xvals, \n    y: yvals, \n    fill: \"tozeroy\", \n    fillcolor: \"rgba(0, 0, 255, 0.1)\",  \n    line: {color: \"rgb(0, 0, 128)\", width:5}, \n    mode: \"lines\", \n    name: \"\", \n    type: \"scatter\",\n    showlegend: false\n  };\n  let dat = [t];\n  return dat;\n}",
            "mode": "js",
            "outputs": [
                "Ly8gRnVuY3Rpb24gdG8gcHJvZHVjZSBsYXlvdXQgaW5mb3JtYXRpb24gZm9yIHRoZSAyZCBCb3VuZCBQcm9iYWJpbGl0eSBQbG90CmdldExheW91dEJQcm9iID0gZnVuY3Rpb24oaW5keCl7CiAgbGV0IGQgPSBjb252ZXJ0RGF0YTJkKGluZHgpOwogIGxldCBtZXRhID0gcGxvdE1ldGFzW2luZHhdOwogIGxldCB0aXRsZSA9IG1ldGEudGl0bGU7CiAgbGV0IHhsYWJlbCA9IG1ldGEueGxhYmVsOwogIGxldCB5bGFiZWwgPSBtZXRhLnlsYWJlbDsKICBsZXQgeHZhbHMgPSBkLng7CiAgbGV0IHl2YWxzID0gZC55OwogIGxldCB4dGlja3MgPSAyMDsKICBsZXQgeXRpY2tzID0gMjA7CiAgaWYgKHR5cGVvZiB4dmFsc1swXSA9PT0gJ3N0cmluZycgfHwgeHZhbHNbMF0gaW5zdGFuY2VvZiBTdHJpbmcpCiAgICB4dGlja3MgPSB4dmFscy5sZW5ndGg7CiAgaWYgKHR5cGVvZiB5dmFsc1swXSA9PT0gJ3N0cmluZycgfHwgeXZhbHNbMF0gaW5zdGFuY2VvZiBTdHJpbmcpCiAgICB5dGlja3MgPSB5dmFscy5sZW5ndGg7CiAgbGV0IEwgPSB7CiAgICB0aXRsZToge3RleHQ6IHRpdGxlLCBmb250OiB7c2l6ZToyMH19LAogICAgd2lkdGg6IF9wbG90V2lkdGgsCiAgICBoZWlnaHQ6IF9wbG90SGVpZ2h0LAogICAgc2hvd2xlZ2VuZDogZmFsc2UsIAogICAgeGF4aXM6IHsKICAgICAgZ3JpZGNvbG9yOiAicmdiKDI1NSwyNTUsMjU1KSIsIAogICAgICBzaG93Z3JpZDogZmFsc2UsIAogICAgICBzaG93bGluZTogdHJ1ZSwgCiAgICAgIHNob3d0aWNrbGFiZWxzOiB0cnVlLCAKICAgICAgdGlja21vZGU6ICJhdXRvIiwKICAgICAgbnRpY2tzOiB4dGlja3MsCiAgICAgIHRpY2tjb2xvcjogInJnYigwLDAsMCkiLCAKICAgICAgdGlja3M6ICJvdXRzaWRlIiwKICAgICAgdGlja2xlbjogNSwgCiAgICAgIHplcm9saW5lOiBmYWxzZSwKICAgICAgdGl0bGU6IHt0ZXh0OiB4bGFiZWwsIGZvbnQ6IHtzaXplOiBfYXhlc1NpemV9fSwKICAgICAgY29sb3I6IF9heGVzQ29sb3IKICAgIH0sIAogICAgeWF4aXM6IHsKICAgICAgZ3JpZGNvbG9yOiAicmdiKDI1NSwyNTUsMjU1KSIsIAogICAgICBzaG93Z3JpZDogZmFsc2UsIAogICAgICBzaG93bGluZTogdHJ1ZSwgCiAgICAgIHNob3d0aWNrbGFiZWxzOiB0cnVlLCAKICAgICAgdGlja21vZGU6ICJhdXRvIiwKICAgICAgbnRpY2tzOiB5dGlja3MsCiAgICAgIHRpY2tjb2xvcjogInJnYigwLDAsMCkiLCAKICAgICAgdGlja3M6ICJvdXRzaWRlIiwKICAgICAgdGlja2xlbjogNSwKICAgICAgemVyb2xpbmU6IGZhbHNlLAogICAgICB0aXRsZToge3RleHQ6IHlsYWJlbCwgZm9udDoge3NpemU6IF9heGVzU2l6ZX19LAogICAgICBjb2xvcjogX2F4ZXNDb2xvcgogICAgfQogIH0KICByZXR1cm4gTDsKfTsKCi8vIEZ1bmN0aW9uIHRvIHByb2R1Y2UgZGF0YSAodHJhY2VzKSBmb3IgdGhlIDJkIEJvdW5kIFByb2JhYmlsaXR5IFBsb3QKZ2V0RGF0YUJQcm9iID0gZnVuY3Rpb24oaW5keCkgewogIGxldCBkID0gY29udmVydERhdGEyZChpbmR4KTsKICBsZXQgeHZhbHMgPSBkLng7CiAgbGV0IHl2YWxzID0gZC55OwogIGxldCB0ID0gewogICAgeDogeHZhbHMsIAogICAgeTogeXZhbHMsIAogICAgZmlsbDogInRvemVyb3kiLCAKICAgIGZpbGxjb2xvcjogInJnYmEoMCwgMCwgMjU1LCAwLjEpIiwgIAogICAgbGluZToge2NvbG9yOiAicmdiKDAsIDAsIDEyOCkiLCB3aWR0aDo1fSwgCiAgICBtb2RlOiAibGluZXMiLCAKICAgIG5hbWU6ICIiLCAKICAgIHR5cGU6ICJzY2F0dGVyIiwKICAgIHNob3dsZWdlbmQ6IGZhbHNlCiAgfTsKICBsZXQgZGF0ID0gW3RdOwogIHJldHVybiBkYXQ7Cn0="
            ]
        },
        {
            "id": "bbcfdb04-6f90-4792-8d51-9381cec53a39",
            "name": "",
            "value": "// Functions to create the layout and data structures for the 3d graph\ngetLayout3d = function(indx) { \n    let meta = plotMetas[indx];\n    let title = meta.title;\n    let xlabel = meta.xlabel;\n    let ylabel = meta.ylabel;\n    let zlabel = meta.zlabel;\n    let pTitle;\n    let layout = {\n        title: {text: title, font:{size: 20}},\n        scene: {\n            xaxis: {\n                color: _axesColor,\n                title: {text: xlabel, font: {size: _axesSize}}\n            },\n            yaxis: {\n                color: _axesColor,\n                title: {text: ylabel, font: {size: _axesSize}}\n            },\n            zaxis: {\n                color: _axesColor,\n                title: {text: zlabel, font: {size: _axesSize}}\n            },\n            camera: {\n                center: {z:-.2},\n                eye: {x: -1.7, y: -1.7, z: 0.25},\n                light: {x:2,y:1, z:.5}\n            },\n            aspectratio: {x: 1,y: 1,z: 1},\n            aspectmode: \"auto\",\n        },\n        autosize: true,\n        width: _plotWidth,\n        height: _plotHeight,\n        margin: {l: 20, r: 20, b: 20, t: 50},\n    }\n    return layout;\n}\n\ngetData3d = function(indx) {\n    let x = [];\n    let y = [];\n    let z = [];\n    let plotDat = DataGrids[indx];\n    for (let i=0;i < plotDat.length; i++) {\n        let rec = plotDat[i];\n        x.push(rec.x_);\n        y.push(rec.y_);\n        z.push(rec.z_);\n    }\n    let ux = Array.from(new Set(x));\n    let uy = Array.from(new Set(y));\n    let uz = []\n    for (let i = 0; i < uy.length; i++) {\n        let row = [];\n        for (let j = 0; j < ux.length; j++) {\n            let zindx = j * uy.length + i;\n            row.push(z[zindx]);\n        }\n        uz.push(row);\n    }\n    let outData = [{  x: ux,\n            y: uy,\n            z: uz,\n            type: 'surface',\n            colorscale: _colorScale,\n            lighting: _lighting,\n            lightposition: {x:100, y:200, z:100},\n            contours: {z: \n                {\n                    show:true,\n                    usecolormap: true,\n                    highlightcolor:\"#42f462\",\n                    project: {z: true}\n                }\n            }\n        }]\n    return outData\n};",
            "mode": "js",
            "outputs": [
                "Ly8gRnVuY3Rpb25zIHRvIGNyZWF0ZSB0aGUgbGF5b3V0IGFuZCBkYXRhIHN0cnVjdHVyZXMgZm9yIHRoZSAzZCBncmFwaApnZXRMYXlvdXQzZCA9IGZ1bmN0aW9uKGluZHgpIHsgCiAgICBsZXQgbWV0YSA9IHBsb3RNZXRhc1tpbmR4XTsKICAgIGxldCB0aXRsZSA9IG1ldGEudGl0bGU7CiAgICBsZXQgeGxhYmVsID0gbWV0YS54bGFiZWw7CiAgICBsZXQgeWxhYmVsID0gbWV0YS55bGFiZWw7CiAgICBsZXQgemxhYmVsID0gbWV0YS56bGFiZWw7CiAgICBsZXQgcFRpdGxlOwogICAgbGV0IGxheW91dCA9IHsKICAgICAgICB0aXRsZToge3RleHQ6IHRpdGxlLCBmb250OntzaXplOiAyMH19LAogICAgICAgIHNjZW5lOiB7CiAgICAgICAgICAgIHhheGlzOiB7CiAgICAgICAgICAgICAgICBjb2xvcjogX2F4ZXNDb2xvciwKICAgICAgICAgICAgICAgIHRpdGxlOiB7dGV4dDogeGxhYmVsLCBmb250OiB7c2l6ZTogX2F4ZXNTaXplfX0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgeWF4aXM6IHsKICAgICAgICAgICAgICAgIGNvbG9yOiBfYXhlc0NvbG9yLAogICAgICAgICAgICAgICAgdGl0bGU6IHt0ZXh0OiB5bGFiZWwsIGZvbnQ6IHtzaXplOiBfYXhlc1NpemV9fQogICAgICAgICAgICB9LAogICAgICAgICAgICB6YXhpczogewogICAgICAgICAgICAgICAgY29sb3I6IF9heGVzQ29sb3IsCiAgICAgICAgICAgICAgICB0aXRsZToge3RleHQ6IHpsYWJlbCwgZm9udDoge3NpemU6IF9heGVzU2l6ZX19CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGNhbWVyYTogewogICAgICAgICAgICAgICAgY2VudGVyOiB7ejotLjJ9LAogICAgICAgICAgICAgICAgZXllOiB7eDogLTEuNywgeTogLTEuNywgejogMC4yNX0sCiAgICAgICAgICAgICAgICBsaWdodDoge3g6Mix5OjEsIHo6LjV9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGFzcGVjdHJhdGlvOiB7eDogMSx5OiAxLHo6IDF9LAogICAgICAgICAgICBhc3BlY3Rtb2RlOiAiYXV0byIsCiAgICAgICAgfSwKICAgICAgICBhdXRvc2l6ZTogdHJ1ZSwKICAgICAgICB3aWR0aDogX3Bsb3RXaWR0aCwKICAgICAgICBoZWlnaHQ6IF9wbG90SGVpZ2h0LAogICAgICAgIG1hcmdpbjoge2w6IDIwLCByOiAyMCwgYjogMjAsIHQ6IDUwfSwKICAgIH0KICAgIHJldHVybiBsYXlvdXQ7Cn0KCmdldERhdGEzZCA9IGZ1bmN0aW9uKGluZHgpIHsKICAgIGxldCB4ID0gW107CiAgICBsZXQgeSA9IFtdOwogICAgbGV0IHogPSBbXTsKICAgIGxldCBwbG90RGF0ID0gRGF0YUdyaWRzW2luZHhdOwogICAgZm9yIChsZXQgaT0wO2kgPCBwbG90RGF0Lmxlbmd0aDsgaSsrKSB7CiAgICAgICAgbGV0IHJlYyA9IHBsb3REYXRbaV07CiAgICAgICAgeC5wdXNoKHJlYy54Xyk7CiAgICAgICAgeS5wdXNoKHJlYy55Xyk7CiAgICAgICAgei5wdXNoKHJlYy56Xyk7CiAgICB9CiAgICBsZXQgdXggPSBBcnJheS5mcm9tKG5ldyBTZXQoeCkpOwogICAgbGV0IHV5ID0gQXJyYXkuZnJvbShuZXcgU2V0KHkpKTsKICAgIGxldCB1eiA9IFtdCiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHV5Lmxlbmd0aDsgaSsrKSB7CiAgICAgICAgbGV0IHJvdyA9IFtdOwogICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdXgubGVuZ3RoOyBqKyspIHsKICAgICAgICAgICAgbGV0IHppbmR4ID0gaiAqIHV5Lmxlbmd0aCArIGk7CiAgICAgICAgICAgIHJvdy5wdXNoKHpbemluZHhdKTsKICAgICAgICB9CiAgICAgICAgdXoucHVzaChyb3cpOwogICAgfQogICAgbGV0IG91dERhdGEgPSBbeyAgeDogdXgsCiAgICAgICAgICAgIHk6IHV5LAogICAgICAgICAgICB6OiB1eiwKICAgICAgICAgICAgdHlwZTogJ3N1cmZhY2UnLAogICAgICAgICAgICBjb2xvcnNjYWxlOiBfY29sb3JTY2FsZSwKICAgICAgICAgICAgbGlnaHRpbmc6IF9saWdodGluZywKICAgICAgICAgICAgbGlnaHRwb3NpdGlvbjoge3g6MTAwLCB5OjIwMCwgejoxMDB9LAogICAgICAgICAgICBjb250b3Vyczoge3o6IAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIHNob3c6dHJ1ZSwKICAgICAgICAgICAgICAgICAgICB1c2Vjb2xvcm1hcDogdHJ1ZSwKICAgICAgICAgICAgICAgICAgICBoaWdobGlnaHRjb2xvcjoiIzQyZjQ2MiIsCiAgICAgICAgICAgICAgICAgICAgcHJvamVjdDoge3o6IHRydWV9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9XQogICAgcmV0dXJuIG91dERhdGEKfTs="
            ]
        },
        {
            "id": "4b7bd283-1dfb-407e-9e50-375809403aa5",
            "name": "",
            "value": "// Functions to create the layout and data structures for the Heatmap graph\ngetLayoutHM = function(indx) { \n    let meta = plotMetas[indx];\n    let title = meta.title;\n    let minVal = -1.0;\n    let midVal = 0.0\n    let colorscale = \"RdBu\";\n    if (meta.qtype == 'dep') {\n        minVal = 0.0;\n        midVal = .5\n        colorscale = \"Blues\";\n    } \n    let xlabel = meta.xlabel;\n    let ylabel = meta.ylabel;\n    let annotations = [];\n    let plotData = DataGrids[indx];\n    for (let d of plotData){\n        let val = +d.z_.toFixed(2);\n        let tcolor = \"rgb(0, 0, 0)\";\n        if (Math.abs(val) > .35)\n            tcolor = \"rgb(240, 240, 240)\";\n        \n        let a = {xref:\"x1\", yref:\"y1\", showarrow: false, x: d.x_, y: d.y_, text:val, \n                font:{family:\"Arial\", color: tcolor, size:12}}\n        annotations.push(a);\n    }\n\n    let layout = {\n        title: {text: title, font:{size: 20}},\n        autosize: true,\n        width: _plotWidth,\n        height: _plotHeight,\n        plot_bgcolor: _axesColor,\n        xaxis: {\n            showgrid: false, \n            showline: true, \n            showticklabels: true, \n            tickmode: \"auto\",\n            tickcolor: \"rgb(0,0,0)\", \n            ticks: \"outside\",\n            ticklen: 5, \n            zeroline: false,\n            title: {text: xlabel, font: {size: _axesSize}},\n            color: _axesColor\n        }, \n        yaxis: {\n            showgrid: false, \n            showline: true, \n            showticklabels: true, \n            tickmode: \"auto\",\n            tickcolor: \"rgb(0,0,0)\", \n            ticks: \"outside\",\n            ticklen: 5,\n            zeroline: false,\n            title: {text: ylabel, font: {size: _axesSize}},\n            color: _axesColor\n        },\n        coloraxis: {\n            colorscale: colorscale,\n            cmax: 1.0, cmin: minVal,\n            cmid: midVal,\n            reversescale:true\n        },\n        annotations: annotations\n    }\n    return layout;\n}\n\ngetDataHM = function(indx) {\n    let x = [];\n    let y = [];\n    let z = [];\n    let plotDat = DataGrids[indx];\n    for (let i=0;i < plotDat.length; i++) {\n        let rec = plotDat[i];\n        x.push(rec.x_);\n        y.push(rec.y_);\n        z.push(rec.z_);\n    }\n    let ux = Array.from(new Set(x));\n    let uy = Array.from(new Set(x));\n    let uz = []\n    // Fill the z matrix with nulls\n    for (let i = 0; i < uy.length; i++) {\n        let row = [];\n        for (let j = 0; j < ux.length; j++) {\n            row.push(null);\n        }\n        uz.push(row);\n    }\n    // Now update any values present in data grid\n    for (let zindx = 0; zindx < z.length; zindx++){\n        let zval = z[zindx];\n        let yval = y[zindx];\n        let xval = x[zindx];\n        let yindx = uy.indexOf(yval);\n        let xindx = ux.indexOf(xval);\n        uz[yindx][xindx] = zval;\n    }\n    let outData = [{\n            x: ux,\n            y: uy,\n            z: uz,\n            xgap:2,\n            ygap:2,\n            type: 'heatmap',\n            coloraxis: \"coloraxis\"\n        }\n        ]\n    return outData\n}; // Heatmap Plot",
            "mode": "js",
            "outputs": [
                "Ly8gRnVuY3Rpb25zIHRvIGNyZWF0ZSB0aGUgbGF5b3V0IGFuZCBkYXRhIHN0cnVjdHVyZXMgZm9yIHRoZSBIZWF0bWFwIGdyYXBoCmdldExheW91dEhNID0gZnVuY3Rpb24oaW5keCkgeyAKICAgIGxldCBtZXRhID0gcGxvdE1ldGFzW2luZHhdOwogICAgbGV0IHRpdGxlID0gbWV0YS50aXRsZTsKICAgIGxldCBtaW5WYWwgPSAtMS4wOwogICAgbGV0IG1pZFZhbCA9IDAuMAogICAgbGV0IGNvbG9yc2NhbGUgPSAiUmRCdSI7CiAgICBpZiAobWV0YS5xdHlwZSA9PSAnZGVwJykgewogICAgICAgIG1pblZhbCA9IDAuMDsKICAgICAgICBtaWRWYWwgPSAuNQogICAgICAgIGNvbG9yc2NhbGUgPSAiQmx1ZXMiOwogICAgfSAKICAgIGxldCB4bGFiZWwgPSBtZXRhLnhsYWJlbDsKICAgIGxldCB5bGFiZWwgPSBtZXRhLnlsYWJlbDsKICAgIGxldCBhbm5vdGF0aW9ucyA9IFtdOwogICAgbGV0IHBsb3REYXRhID0gRGF0YUdyaWRzW2luZHhdOwogICAgZm9yIChsZXQgZCBvZiBwbG90RGF0YSl7CiAgICAgICAgbGV0IHZhbCA9ICtkLnpfLnRvRml4ZWQoMik7CiAgICAgICAgbGV0IHRjb2xvciA9ICJyZ2IoMCwgMCwgMCkiOwogICAgICAgIGlmIChNYXRoLmFicyh2YWwpID4gLjM1KQogICAgICAgICAgICB0Y29sb3IgPSAicmdiKDI0MCwgMjQwLCAyNDApIjsKICAgICAgICAKICAgICAgICBsZXQgYSA9IHt4cmVmOiJ4MSIsIHlyZWY6InkxIiwgc2hvd2Fycm93OiBmYWxzZSwgeDogZC54XywgeTogZC55XywgdGV4dDp2YWwsIAogICAgICAgICAgICAgICAgZm9udDp7ZmFtaWx5OiJBcmlhbCIsIGNvbG9yOiB0Y29sb3IsIHNpemU6MTJ9fQogICAgICAgIGFubm90YXRpb25zLnB1c2goYSk7CiAgICB9CgogICAgbGV0IGxheW91dCA9IHsKICAgICAgICB0aXRsZToge3RleHQ6IHRpdGxlLCBmb250OntzaXplOiAyMH19LAogICAgICAgIGF1dG9zaXplOiB0cnVlLAogICAgICAgIHdpZHRoOiBfcGxvdFdpZHRoLAogICAgICAgIGhlaWdodDogX3Bsb3RIZWlnaHQsCiAgICAgICAgcGxvdF9iZ2NvbG9yOiBfYXhlc0NvbG9yLAogICAgICAgIHhheGlzOiB7CiAgICAgICAgICAgIHNob3dncmlkOiBmYWxzZSwgCiAgICAgICAgICAgIHNob3dsaW5lOiB0cnVlLCAKICAgICAgICAgICAgc2hvd3RpY2tsYWJlbHM6IHRydWUsIAogICAgICAgICAgICB0aWNrbW9kZTogImF1dG8iLAogICAgICAgICAgICB0aWNrY29sb3I6ICJyZ2IoMCwwLDApIiwgCiAgICAgICAgICAgIHRpY2tzOiAib3V0c2lkZSIsCiAgICAgICAgICAgIHRpY2tsZW46IDUsIAogICAgICAgICAgICB6ZXJvbGluZTogZmFsc2UsCiAgICAgICAgICAgIHRpdGxlOiB7dGV4dDogeGxhYmVsLCBmb250OiB7c2l6ZTogX2F4ZXNTaXplfX0sCiAgICAgICAgICAgIGNvbG9yOiBfYXhlc0NvbG9yCiAgICAgICAgfSwgCiAgICAgICAgeWF4aXM6IHsKICAgICAgICAgICAgc2hvd2dyaWQ6IGZhbHNlLCAKICAgICAgICAgICAgc2hvd2xpbmU6IHRydWUsIAogICAgICAgICAgICBzaG93dGlja2xhYmVsczogdHJ1ZSwgCiAgICAgICAgICAgIHRpY2ttb2RlOiAiYXV0byIsCiAgICAgICAgICAgIHRpY2tjb2xvcjogInJnYigwLDAsMCkiLCAKICAgICAgICAgICAgdGlja3M6ICJvdXRzaWRlIiwKICAgICAgICAgICAgdGlja2xlbjogNSwKICAgICAgICAgICAgemVyb2xpbmU6IGZhbHNlLAogICAgICAgICAgICB0aXRsZToge3RleHQ6IHlsYWJlbCwgZm9udDoge3NpemU6IF9heGVzU2l6ZX19LAogICAgICAgICAgICBjb2xvcjogX2F4ZXNDb2xvcgogICAgICAgIH0sCiAgICAgICAgY29sb3JheGlzOiB7CiAgICAgICAgICAgIGNvbG9yc2NhbGU6IGNvbG9yc2NhbGUsCiAgICAgICAgICAgIGNtYXg6IDEuMCwgY21pbjogbWluVmFsLAogICAgICAgICAgICBjbWlkOiBtaWRWYWwsCiAgICAgICAgICAgIHJldmVyc2VzY2FsZTp0cnVlCiAgICAgICAgfSwKICAgICAgICBhbm5vdGF0aW9uczogYW5ub3RhdGlvbnMKICAgIH0KICAgIHJldHVybiBsYXlvdXQ7Cn0KCmdldERhdGFITSA9IGZ1bmN0aW9uKGluZHgpIHsKICAgIGxldCB4ID0gW107CiAgICBsZXQgeSA9IFtdOwogICAgbGV0IHogPSBbXTsKICAgIGxldCBwbG90RGF0ID0gRGF0YUdyaWRzW2luZHhdOwogICAgZm9yIChsZXQgaT0wO2kgPCBwbG90RGF0Lmxlbmd0aDsgaSsrKSB7CiAgICAgICAgbGV0IHJlYyA9IHBsb3REYXRbaV07CiAgICAgICAgeC5wdXNoKHJlYy54Xyk7CiAgICAgICAgeS5wdXNoKHJlYy55Xyk7CiAgICAgICAgei5wdXNoKHJlYy56Xyk7CiAgICB9CiAgICBsZXQgdXggPSBBcnJheS5mcm9tKG5ldyBTZXQoeCkpOwogICAgbGV0IHV5ID0gQXJyYXkuZnJvbShuZXcgU2V0KHgpKTsKICAgIGxldCB1eiA9IFtdCiAgICAvLyBGaWxsIHRoZSB6IG1hdHJpeCB3aXRoIG51bGxzCiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHV5Lmxlbmd0aDsgaSsrKSB7CiAgICAgICAgbGV0IHJvdyA9IFtdOwogICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdXgubGVuZ3RoOyBqKyspIHsKICAgICAgICAgICAgcm93LnB1c2gobnVsbCk7CiAgICAgICAgfQogICAgICAgIHV6LnB1c2gocm93KTsKICAgIH0KICAgIC8vIE5vdyB1cGRhdGUgYW55IHZhbHVlcyBwcmVzZW50IGluIGRhdGEgZ3JpZAogICAgZm9yIChsZXQgemluZHggPSAwOyB6aW5keCA8IHoubGVuZ3RoOyB6aW5keCsrKXsKICAgICAgICBsZXQgenZhbCA9IHpbemluZHhdOwogICAgICAgIGxldCB5dmFsID0geVt6aW5keF07CiAgICAgICAgbGV0IHh2YWwgPSB4W3ppbmR4XTsKICAgICAgICBsZXQgeWluZHggPSB1eS5pbmRleE9mKHl2YWwpOwogICAgICAgIGxldCB4aW5keCA9IHV4LmluZGV4T2YoeHZhbCk7CiAgICAgICAgdXpbeWluZHhdW3hpbmR4XSA9IHp2YWw7CiAgICB9CiAgICBsZXQgb3V0RGF0YSA9IFt7CiAgICAgICAgICAgIHg6IHV4LAogICAgICAgICAgICB5OiB1eSwKICAgICAgICAgICAgejogdXosCiAgICAgICAgICAgIHhnYXA6MiwKICAgICAgICAgICAgeWdhcDoyLAogICAgICAgICAgICB0eXBlOiAnaGVhdG1hcCcsCiAgICAgICAgICAgIGNvbG9yYXhpczogImNvbG9yYXhpcyIKICAgICAgICB9CiAgICAgICAgXQogICAgcmV0dXJuIG91dERhdGEKfTsgLy8gSGVhdG1hcCBQbG90"
            ]
        },
        {
            "id": "a89d3588-7876-42b9-92d9-28b0f3780d1e",
            "name": "",
            "value": "// Functions to create the layout and data structures for the Causal Model graph\ngetInfoCM = function(indx) {\n    let plotData = DataGrids[indx];\n    let aspectR = _plotWidth / _plotHeight;\n    let rawvars = [];\n    let varPositions = []\n    let edgeDefs = [];\n    for (let d of plotData) {\n        rawvars.push(d.x_);\n        if (d.y_.length > 0)\n            rawvars.push(d.y_);\n    }\n    let vars = Array.from(new Set(rawvars));\n    let nVars = vars.length;\n    let pi = Math.PI;\n    let angle = 2 * pi / nVars;\n    let startAngle = pi / 2;\n    for (let v in vars) {\n        let currAngle = startAngle - (v * angle)\n        let xpos = Math.cos(currAngle) * 100;\n        let ypos = Math.sin(currAngle) * 100;\n        varPositions.push({ang: currAngle, xpos:xpos, ypos:ypos});\n    }\n    for (let d of plotData) {\n        let causeVar = d.x_;\n        let effVar = d.y_;\n        let strength = d.z_;\n        // We overlay range1low and rnage1high to hold correlation\n        // and Maximum Direct Effect (MDE) respectively.\n        let correlation = d.range1low;\n        let mde = d.range1high;\n        if (effVar.length > 0) {\n            let causeInd = vars.indexOf(causeVar);\n            let effInd = vars.indexOf(effVar);\n            let causePos = varPositions[causeInd];\n            let effPos = varPositions[effInd];\n            let edef = {startPos:causePos, endPos: effPos, strength: strength,\n                        correlation: correlation, mde: mde};\n            edgeDefs.push(edef);\n        }\n    }\n    let info = {vars:vars, varPositions: varPositions, edgeDefs: edgeDefs}\n    return info;\n}\n\ngetLayoutCM = function(indx) { \n    let meta = plotMetas[indx];\n    let title = meta.title;\n    let xlabel = meta.xlabel;\n    let ylabel = meta.ylabel;\n    let pTitle = \"Causal Model\";\n    let annotations = [];\n    let info = getInfoCM(indx);\n    let vars = info.vars;\n    let nVars = vars.length;\n    let varSize = 75;\n    if (nVars > 10) {\n        varSize = varSize - varSize * (nVars - 10) * .05;\n        if (varSize < 20)\n            varSize = 20;\n    }\n    for (let i in vars) {\n        let tcolor = \"rgb(0, 0, 0)\";\n        let v = vars[i];\n        let pos = info.varPositions[i];\n\n        let a = {xref:\"x1\", yref:\"y1\", showarrow: false, x: pos.xpos, y: pos.ypos, text: v,\n                font:{family:\"Arial\", color: tcolor, size:16}}\n        annotations.push(a);\n    }\n    let edges = info.edgeDefs;\n    let labelAnnotations = []\n    for (let e of edges) {\n        let startPos = e.startPos;\n        let endPos = e.endPos;\n        let strength = e.strength;\n        let correlation = e.correlation;\n        //let correlation = -1;\n        let mde = e.mde;\n        let tcolor;\n        let green = 0;\n        let red = 0;\n        let blue = 0;\n        let minSat = .2;\n        let gain = 1.0 - minSat;\n        if (correlation >= 0) {\n            red = 1;\n            green = 101;\n            blue = 93;\n        }\n        else {\n            red = 139;\n            green = 80;\n            blue = 9.9;\n        }\n        let sat = minSat + gain * Math.abs(correlation);\n        let arrowside = \"end\";\n        let arrowsize = .75\n        let startarrowsize = .1;\n        let standoff = varSize / 2 + 2;\n        if (strength < .1)\n            arrowside = \"start+end\";\n            startarrowsize = arrowsize - (strength * 5 * arrowsize);\n        tcolor = \"rgb(\" + red.toString() + \",\" + green.toString() + \",\" + blue.toString() + \")\";\n        let a = {xref:\"x1\", yref:\"y1\", showarrow: true, xref:\"x\", axref:\"x\",\n                yref:\"y\", ayref:\"y\", x: endPos.xpos, y: endPos.ypos, ax: startPos.xpos, ay: startPos.ypos, \n                text:\"\", arrowsize: .75, \n                arrowwidth:5, opacity:sat, arrowside:arrowside, startarrowsize:startarrowsize, arrowhead:2, startarrowhead:3,\n                arrowcolor: tcolor, standoff: standoff, startstandoff: standoff, \n                font:{family:\"Arial\", color: tcolor, size:12}}\n        annotations.push(a);\n        let labeloffset = .55;\n        let labelx = startPos.xpos + (endPos.xpos - startPos.xpos) * labeloffset;\n        let labely = startPos.ypos + (endPos.ypos - startPos.ypos) * labeloffset;\n        let label = {xref:\"x1\", yref:\"y1\", showarrow: false, x: labelx, y: labely, text: correlation.toFixed(2), \n                bgcolor:\"rgba(255,255,255,.65)\",\n                font:{family:\"Arial\", color: \"rgb(0,0,0)\", size:12}}\n        labelAnnotations.push(label);\n    }\n    for (let a of labelAnnotations)\n        annotations.push(a);\n    //annotations = annotations + labelAnnotations;\n    let layout = {\n        title: {text: title, font:{size: 20}},\n        autosize: true,\n        width: _plotWidth,\n        height: _plotHeight,\n         margin: {l:10, r:10, t:50, b:10},\n        xaxis: {\n            showgrid: false, \n            showline: false, \n            showticklabels: false, \n            zeroline: false,\n            title: {text: xlabel, font: {size: _axesSize}},\n            color: _axesColor\n        }, \n        yaxis: {\n           showgrid: false, \n            showline: false, \n            showticklabels: false, \n            zeroline: false,\n            title: {text: ylabel, font: {size: _axesSize}},\n            color: _axesColor\n        },\n        annotations: annotations\n    }\n    return layout;\n}\n\ngetDataCM = function(indx) {\n    let info = getInfoCM(indx);\n    let vars = info.vars;\n    let nVars = vars.length;\n    let varSize = 75;\n    if (nVars > 10) {\n        varSize = varSize - varSize * (nVars - 10) * .05;\n        if (varSize < 20)\n            varSize = 20;\n    }\n    let markerX = [];\n    let markerY = [];\n    for (let i in vars) {\n        let tcolor = \"rgb(0, 255, 0)\";\n        //if (Math.abs(val) > .35)\n        //    tcolor = \"rgb(240, 240, 240)\";\n        let v = vars[i];\n        let pos = info.varPositions[i];\n        markerX.push(pos.xpos);\n        markerY.push(pos.ypos);\n    }\n    let colors = [\"rgb(251,180,174)\", \"rgb(179,205,227)\", \"rgb(204,235,197)\",\"rgb(222,203,228)\",\"rgb(254,217,166)\",\n                \"rgb(179, 266, 205)\",\"rgb(229,216,189)\",\"rgb(255,219,236)\",\"rgb(204,204,204)\", \"rgb(253, 205, 172\",\n                \"rgb(230,245, 201\"];\n    let allcolors = [];\n    for (let i = 0;i < 50; i++) {\n        let c = colors[i % colors.length];\n        allcolors.push(c);\n    }\n    let outData = [{\n            x: markerX,\n            y: markerY,\n            mode: \"markers\",\n            marker: {\n                size: varSize,\n                color: allcolors\n            }\n        }];\n    return outData\n}; // Causal Model",
            "mode": "js",
            "outputs": [
                ""
            ]
        },
        {
            "id": "101aa325-b757-4f8b-9d4b-f919bd3315a1",
            "name": "",
            "value": "Plotly = require(\"https://cdn.plot.ly/plotly-latest.min.js\")\n\n// Create a single 2d plot using the index into the ECL return _plots list.\ncreate2dPlot = function(indx) {\n    var layout2d;\n    var data2d;\n    let qtype = plotMetas[indx].qtype;\n    if (qtype == 'prob'){\n        layout2d = getLayoutProb(indx);\n        data2d = getDataProb(indx);\n    }\n    else if (qtype == 'expct') {\n        layout2d = getLayoutExp(indx);\n        data2d = getDataExp(indx);\n    }\n    else if (qtype == 'bprob') {\n        layout2d = getLayoutBProb(indx);\n        data2d = getDataBProb(indx);\n    }\n    let div2d = document.createElement(\"div\");\n    let config = {\n        modeBarButtonsToRemove: ['pan','orbitRotation', 'resetCameraDefault3d'],\n        responsive: true,\n        scrollZoom: false\n    }\n    Plotly.newPlot(div2d, data2d, layout2d);\n    return div2d;\n}\n\n// Create a single 3d plot using the index into the ECL return _plots list.\ncreate3dPlot = function(indx) {\n    let layout3d = getLayout3d(indx);\n    let data3d = getData3d(indx);\n    let div3d = document.createElement(\"div\");\n    let config = {\n        modeBarButtonsToRemove: ['pan3d','orbitRotation', 'resetCameraDefault3d'],\n        responsive: true,\n        scrollZoom: false\n    }\n    Plotly.newPlot(div3d, data3d, layout3d, config);\n    return div3d;\n}\n\n// Create a single heatmap plot based on the index.\ncreateSpecialPlot = function(indx) {\n    let layoutSP;\n    let dataSP;\n    let qtype = plotMetas[indx].qtype;\n    if (qtype == 'cmodel') {\n        layoutSP = getLayoutCM(indx);\n        dataSP = getDataCM(indx);\n    }\n    else {\n        layoutSP = getLayoutHM(indx);\n        dataSP = getDataHM(indx);\n    }\n    let divSP = document.createElement(\"div\");\n    let config = {\n        modeBarButtonsToRemove: ['pan3d','orbitRotation', 'resetCameraDefault3d'],\n        responsive: true,\n        scrollZoom: false\n    }\n    Plotly.newPlot(divSP, dataSP, layoutSP);\n    return divSP;\n}",
            "mode": "js",
            "outputs": [
                "UGxvdGx5ID0gcmVxdWlyZSgiaHR0cHM6Ly9jZG4ucGxvdC5seS9wbG90bHktbGF0ZXN0Lm1pbi5qcyIpCgovLyBDcmVhdGUgYSBzaW5nbGUgMmQgcGxvdCB1c2luZyB0aGUgaW5kZXggaW50byB0aGUgRUNMIHJldHVybiBfcGxvdHMgbGlzdC4KY3JlYXRlMmRQbG90ID0gZnVuY3Rpb24oaW5keCkgewogICAgdmFyIGxheW91dDJkOwogICAgdmFyIGRhdGEyZDsKICAgIGxldCBxdHlwZSA9IHBsb3RNZXRhc1tpbmR4XS5xdHlwZTsKICAgIGlmIChxdHlwZSA9PSAncHJvYicpewogICAgICAgIGxheW91dDJkID0gZ2V0TGF5b3V0UHJvYihpbmR4KTsKICAgICAgICBkYXRhMmQgPSBnZXREYXRhUHJvYihpbmR4KTsKICAgIH0KICAgIGVsc2UgaWYgKHF0eXBlID09ICdleHBjdCcpIHsKICAgICAgICBsYXlvdXQyZCA9IGdldExheW91dEV4cChpbmR4KTsKICAgICAgICBkYXRhMmQgPSBnZXREYXRhRXhwKGluZHgpOwogICAgfQogICAgZWxzZSBpZiAocXR5cGUgPT0gJ2Jwcm9iJykgewogICAgICAgIGxheW91dDJkID0gZ2V0TGF5b3V0QlByb2IoaW5keCk7CiAgICAgICAgZGF0YTJkID0gZ2V0RGF0YUJQcm9iKGluZHgpOwogICAgfQogICAgbGV0IGRpdjJkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiZGl2Iik7CiAgICBsZXQgY29uZmlnID0gewogICAgICAgIG1vZGVCYXJCdXR0b25zVG9SZW1vdmU6IFsncGFuJywnb3JiaXRSb3RhdGlvbicsICdyZXNldENhbWVyYURlZmF1bHQzZCddLAogICAgICAgIHJlc3BvbnNpdmU6IHRydWUsCiAgICAgICAgc2Nyb2xsWm9vbTogZmFsc2UKICAgIH0KICAgIFBsb3RseS5uZXdQbG90KGRpdjJkLCBkYXRhMmQsIGxheW91dDJkKTsKICAgIHJldHVybiBkaXYyZDsKfQoKLy8gQ3JlYXRlIGEgc2luZ2xlIDNkIHBsb3QgdXNpbmcgdGhlIGluZGV4IGludG8gdGhlIEVDTCByZXR1cm4gX3Bsb3RzIGxpc3QuCmNyZWF0ZTNkUGxvdCA9IGZ1bmN0aW9uKGluZHgpIHsKICAgIGxldCBsYXlvdXQzZCA9IGdldExheW91dDNkKGluZHgpOwogICAgbGV0IGRhdGEzZCA9IGdldERhdGEzZChpbmR4KTsKICAgIGxldCBkaXYzZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpOwogICAgbGV0IGNvbmZpZyA9IHsKICAgICAgICBtb2RlQmFyQnV0dG9uc1RvUmVtb3ZlOiBbJ3BhbjNkJywnb3JiaXRSb3RhdGlvbicsICdyZXNldENhbWVyYURlZmF1bHQzZCddLAogICAgICAgIHJlc3BvbnNpdmU6IHRydWUsCiAgICAgICAgc2Nyb2xsWm9vbTogZmFsc2UKICAgIH0KICAgIFBsb3RseS5uZXdQbG90KGRpdjNkLCBkYXRhM2QsIGxheW91dDNkLCBjb25maWcpOwogICAgcmV0dXJuIGRpdjNkOwp9CgovLyBDcmVhdGUgYSBzaW5nbGUgaGVhdG1hcCBwbG90IGJhc2VkIG9uIHRoZSBpbmRleC4KY3JlYXRlU3BlY2lhbFBsb3QgPSBmdW5jdGlvbihpbmR4KSB7CiAgICBsZXQgbGF5b3V0U1A7CiAgICBsZXQgZGF0YVNQOwogICAgbGV0IHF0eXBlID0gcGxvdE1ldGFzW2luZHhdLnF0eXBlOwogICAgaWYgKHF0eXBlID09ICdjbW9kZWwnKSB7CiAgICAgICAgbGF5b3V0U1AgPSBnZXRMYXlvdXRDTShpbmR4KTsKICAgICAgICBkYXRhU1AgPSBnZXREYXRhQ00oaW5keCk7CiAgICB9CiAgICBlbHNlIHsKICAgICAgICBsYXlvdXRTUCA9IGdldExheW91dEhNKGluZHgpOwogICAgICAgIGRhdGFTUCA9IGdldERhdGFITShpbmR4KTsKICAgIH0KICAgIGxldCBkaXZTUCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpOwogICAgbGV0IGNvbmZpZyA9IHsKICAgICAgICBtb2RlQmFyQnV0dG9uc1RvUmVtb3ZlOiBbJ3BhbjNkJywnb3JiaXRSb3RhdGlvbicsICdyZXNldENhbWVyYURlZmF1bHQzZCddLAogICAgICAgIHJlc3BvbnNpdmU6IHRydWUsCiAgICAgICAgc2Nyb2xsWm9vbTogZmFsc2UKICAgIH0KICAgIFBsb3RseS5uZXdQbG90KGRpdlNQLCBkYXRhU1AsIGxheW91dFNQKTsKICAgIHJldHVybiBkaXZTUDsKfQ=="
            ]
        },
        {
            "id": "ca2ac26e-4be5-4e2a-bcfe-d311fce9dee7",
            "name": "",
            "value": "// Top level plotting functions.\n\n// Function to create all of the plots.  2d and 3d plots use\n// different libraries.\n// Returns a list of html elements containing the plots.\ncreatePlots = function() {\n    let plots = [];\n    for (let i in plotMetas) {\n        let plotMeta = plotMetas[i];\n        let ndims = parseInt(plotMeta.dims);\n        let qtype = plotMeta.qtype;\n        let newPlot\n        if (qtype == 'dep' || qtype == 'cor' || qtype == 'cmodel') {\n            // Dependency or correlation heatmap\n            newPlot = createSpecialPlot(i);\n        }\n        else if (ndims == 3) {\n            newPlot = create3dPlot(i);\n        }\n        else {\n            newPlot = create2dPlot(i);\n        }\n        plots.push(newPlot);\n    }\n    return plots;\n}\n\n// Function to render all of the plots into a given <div>\n// specified by elemId.  Plots is the set of elements returned\n// by createPlots.\nrenderPlots = function(elemId, plots) {\n    let div = document.getElementById(elemId);\n    div.innerHTML = \"\";\n    for (let plot of plots) {\n        div.append(plot);\n        let hr = document.createElement(\"hr\",{\"height\":\"10px\", \"border-width\":\"0\", \"background-color\":\"#000000\"});\n        hr.setAttribute('size', '0px');\n        hr.setAttribute('color', '#000000');\n        hr.setAttribute('border-width', \"0\");\n        hr.setAttribute('noshade', \"true\");\n        div.append(hr);\n    }\n    return;\n}",
            "mode": "js",
            "outputs": [
                "Ly8gVG9wIGxldmVsIHBsb3R0aW5nIGZ1bmN0aW9ucy4KCi8vIEZ1bmN0aW9uIHRvIGNyZWF0ZSBhbGwgb2YgdGhlIHBsb3RzLiAgMmQgYW5kIDNkIHBsb3RzIHVzZQovLyBkaWZmZXJlbnQgbGlicmFyaWVzLgovLyBSZXR1cm5zIGEgbGlzdCBvZiBodG1sIGVsZW1lbnRzIGNvbnRhaW5pbmcgdGhlIHBsb3RzLgpjcmVhdGVQbG90cyA9IGZ1bmN0aW9uKCkgewogICAgbGV0IHBsb3RzID0gW107CiAgICBmb3IgKGxldCBpIGluIHBsb3RNZXRhcykgewogICAgICAgIGxldCBwbG90TWV0YSA9IHBsb3RNZXRhc1tpXTsKICAgICAgICBsZXQgbmRpbXMgPSBwYXJzZUludChwbG90TWV0YS5kaW1zKTsKICAgICAgICBsZXQgcXR5cGUgPSBwbG90TWV0YS5xdHlwZTsKICAgICAgICBsZXQgbmV3UGxvdAogICAgICAgIGlmIChxdHlwZSA9PSAnZGVwJyB8fCBxdHlwZSA9PSAnY29yJyB8fCBxdHlwZSA9PSAnY21vZGVsJykgewogICAgICAgICAgICAvLyBEZXBlbmRlbmN5IG9yIGNvcnJlbGF0aW9uIGhlYXRtYXAKICAgICAgICAgICAgbmV3UGxvdCA9IGNyZWF0ZVNwZWNpYWxQbG90KGkpOwogICAgICAgIH0KICAgICAgICBlbHNlIGlmIChuZGltcyA9PSAzKSB7CiAgICAgICAgICAgIG5ld1Bsb3QgPSBjcmVhdGUzZFBsb3QoaSk7CiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICBuZXdQbG90ID0gY3JlYXRlMmRQbG90KGkpOwogICAgICAgIH0KICAgICAgICBwbG90cy5wdXNoKG5ld1Bsb3QpOwogICAgfQogICAgcmV0dXJuIHBsb3RzOwp9CgovLyBGdW5jdGlvbiB0byByZW5kZXIgYWxsIG9mIHRoZSBwbG90cyBpbnRvIGEgZ2l2ZW4gPGRpdj4KLy8gc3BlY2lmaWVkIGJ5IGVsZW1JZC4gIFBsb3RzIGlzIHRoZSBzZXQgb2YgZWxlbWVudHMgcmV0dXJuZWQKLy8gYnkgY3JlYXRlUGxvdHMuCnJlbmRlclBsb3RzID0gZnVuY3Rpb24oZWxlbUlkLCBwbG90cykgewogICAgbGV0IGRpdiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGVsZW1JZCk7CiAgICBkaXYuaW5uZXJIVE1MID0gIiI7CiAgICBmb3IgKGxldCBwbG90IG9mIHBsb3RzKSB7CiAgICAgICAgZGl2LmFwcGVuZChwbG90KTsKICAgICAgICBsZXQgaHIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJociIseyJoZWlnaHQiOiIxMHB4IiwgImJvcmRlci13aWR0aCI6IjAiLCAiYmFja2dyb3VuZC1jb2xvciI6IiMwMDAwMDAifSk7CiAgICAgICAgaHIuc2V0QXR0cmlidXRlKCdzaXplJywgJzBweCcpOwogICAgICAgIGhyLnNldEF0dHJpYnV0ZSgnY29sb3InLCAnIzAwMDAwMCcpOwogICAgICAgIGhyLnNldEF0dHJpYnV0ZSgnYm9yZGVyLXdpZHRoJywgIjAiKTsKICAgICAgICBoci5zZXRBdHRyaWJ1dGUoJ25vc2hhZGUnLCAidHJ1ZSIpOwogICAgICAgIGRpdi5hcHBlbmQoaHIpOwogICAgfQogICAgcmV0dXJuOwp9"
            ]
        },
        {
            "id": "9142cb5d-6776-4470-a2bc-5d8e16313864",
            "name": "",
            "value": "// Create and render the plots\nplots = createPlots();\nrenderPlots(\"_plots\", plots);",
            "mode": "js",
            "outputs": [
                "Ly8gQ3JlYXRlIGFuZCByZW5kZXIgdGhlIHBsb3RzCnBsb3RzID0gY3JlYXRlUGxvdHMoKTsKcmVuZGVyUGxvdHMoIl9wbG90cyIsIHBsb3RzKTs="
            ]
        }
    ]
}